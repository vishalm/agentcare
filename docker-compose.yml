version: '3.8'

services:
  # AgentCare Application
  agentcare:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: agentcare-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_PORT=3000
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen2.5:latest
      - ENABLE_OLLAMA_LLM=true
      - ENABLE_RAG_SYSTEM=true
      - ENABLE_USER_REGISTRATION=true
      - JWT_SECRET=your-super-secure-jwt-secret-change-in-production
      - SESSION_SECRET=your-session-secret-key
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - ollama
      - redis
    restart: unless-stopped
    networks:
      - agentcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development version of AgentCare
  agentcare-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: agentcare-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DEBUG=agentcare:*
      - LOG_LEVEL=debug
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen2.5:latest
      - ENABLE_OLLAMA_LLM=true
      - ENABLE_RAG_SYSTEM=true
      - ENABLE_USER_REGISTRATION=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: npm run dev:backend
    depends_on:
      - ollama
      - redis
    restart: unless-stopped
    networks:
      - agentcare-network
    profiles:
      - development

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: agentcare-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/root/.ollama/models
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=1
    restart: unless-stopped
    networks:
      - agentcare-network
    # Pull model on startup
    command: >
      sh -c "ollama serve & 
             sleep 10 && 
             ollama pull qwen2.5:latest && 
             wait"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: agentcare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - agentcare-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database (Optional - for production)
  postgres:
    image: postgres:15-alpine
    container_name: agentcare-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agentcare
      - POSTGRES_USER=agentcare_user
      - POSTGRES_PASSWORD=your_secure_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds:/docker-entrypoint-initdb.d/02-seeds
    restart: unless-stopped
    networks:
      - agentcare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentcare_user -d agentcare"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: agentcare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - agentcare
    restart: unless-stopped
    networks:
      - agentcare-network
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agentcare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agentcare-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: agentcare-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - agentcare-network
    profiles:
      - monitoring

# Shared volumes
volumes:
  ollama_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  agentcare-network:
    driver: bridge
    name: agentcare
    ipam:
      config:
        - subnet: 172.20.0.0/16 