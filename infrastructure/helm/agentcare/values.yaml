# AgentCare Helm Chart Values
# Default values for agentcare chart

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  environment: production
  
# Service Account
serviceAccount:
  create: true
  name: agentcare
  annotations: {}

# Service configuration
service:
  type: NodePort
  port: 3000
  targetPort: 3000
  nodePort: 31780
  annotations: {}

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# AgentCare Application
agentcare:
  image:
    registry: docker.io
    repository: agentcare/api
    tag: "2.0.0-alpha"
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}

  # Resource limits
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # Security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001

  # Environment variables
  env:
    NODE_ENV: production
    API_PORT: "3000"
    LOG_LEVEL: info
    ENABLE_OLLAMA_LLM: "true"
    ENABLE_RAG_SYSTEM: "true"
    ENABLE_USER_REGISTRATION: "true"
    HIPAA_LOGGING: "true"
    ENABLE_METRICS: "true"
    ENABLE_TRACING: "true"

  # ConfigMap and Secret references
  configMap:
    name: agentcare-config
  
  secret:
    name: agentcare-secrets

  # Volume mounts
  volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: cache
      mountPath: /app/cache
    - name: app-code
      mountPath: /app

  volumes:
    - name: tmp
      emptyDir: {}
    - name: cache
      emptyDir: {}
    - name: app-code
      configMap:
        name: agentcare-app

# Ollama LLM Service
ollama:
  enabled: true
  image:
    registry: docker.io
    repository: ollama/ollama
    tag: latest
    pullPolicy: IfNotPresent

  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 11434
    targetPort: 11434

  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
      nvidia.com/gpu: 1  # Optional GPU support
    requests:
      cpu: 500m
      memory: 2Gi

  persistence:
    enabled: true
    storageClass: ""
    size: 50Gi
    accessMode: ReadWriteOnce

  models:
    - qwen2.5:latest
    - llama2:latest

  env:
    OLLAMA_HOST: "0.0.0.0:11434"
    OLLAMA_NUM_PARALLEL: "2"
    OLLAMA_MAX_LOADED_MODELS: "1"

# Redis Configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Will be generated if empty
  
  master:
    persistence:
      enabled: true
      size: 8Gi
    
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      type: NodePort
      port: 6379
      nodePort: 31830

# PostgreSQL Configuration
postgresql:
  enabled: true
  auth:
    database: agentcare
    username: agentcare_user
    password: ""  # Will be generated if empty
  
  primary:
    persistence:
      enabled: true
      size: 20Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    service:
      type: NodePort
      port: 5432
      nodePort: 31820

  metrics:
    enabled: true

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: localhost
      paths:
        - path: /
          pathType: Prefix
          service:
            name: agentcare
            port:
              number: 3000

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: false
      service:
        type: NodePort
        nodePort: 31790
        ports:
          - name: http-web
            port: 80
            targetPort: 9090
            nodePort: 31790
          - name: http-api
            port: 9090
            targetPort: 9090
    alertmanager:
      service:
        type: NodePort
        port: 9093
        nodePort: 31791
    pushgateway:
      service:
        type: NodePort
        port: 9091
        nodePort: 31792
    nodeExporter:
      service:
        type: NodePort
        port: 9100
        nodePort: 31793
  grafana:
    enabled: true
    persistence:
      enabled: false
    service:
      type: NodePort
      port: 3001
      nodePort: 31800
    adminPassword: admin123

# Logging Configuration
logging:
  loki:
    enabled: false
  promtail:
    enabled: false

# Tracing Configuration
tracing:
  jaeger:
    enabled: true
    allInOne:
      enabled: true
      service:
        type: NodePort
        port: 16686
        nodePort: 31810
    collector:
      enabled: true
      service:
        type: NodePort
        port: 14268
        nodePort: 31811
    agent:
      enabled: false
    query:
      enabled: false
    storage:
      type: memory

# Security and Compliance
security:
  podSecurityPolicy:
    enabled: true
  
  networkPolicies:
    enabled: true
  
  rbac:
    create: true
  
  serviceAccount:
    create: true
    name: agentcare
    annotations: {}

# Secrets Management
secrets:
  # External secrets operator
  externalSecrets:
    enabled: false
    secretStore:
      name: vault-backend
      kind: SecretStore
  
  # Manual secrets
  jwt:
    secret: ""  # Generated if empty
    expiresIn: 24h
  
  session:
    secret: ""  # Generated if empty
  
  encryption:
    key: ""  # Generated if empty

# Backup Configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"
  storage:
    type: s3
    bucket: agentcare-backups
    region: us-west-2

# Compliance
compliance:
  hipaa:
    enabled: true
    auditLog:
      enabled: true
      retention: "7y"
    
    encryption:
      atRest: true
      inTransit: true
    
    accessControl:
      enabled: true
      rbac: true

# Node Selection
nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - agentcare
        topologyKey: kubernetes.io/hostname

# Persistent Volumes
persistence:
  logs:
    enabled: true
    storageClass: ""
    size: 10Gi
    accessMode: ReadWriteOnce
  
  cache:
    enabled: true
    storageClass: ""
    size: 5Gi
    accessMode: ReadWriteOnce

# Development and Testing
development:
  enabled: false
  debugMode: false
  mockData: false

# Feature Flags
features:
  ollamaLLM: true
  ragSystem: true
  userRegistration: true
  guestBooking: true
  smsNotifications: false
  calendarSync: false
  emailReminders: true
  monitoring: true
  tracing: true
  auditLogging: true

# Resource Configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Application Configuration
command: ["node"]
args: ["/app/server.js"]

# Frontend Configuration
frontend:
  replicaCount: 2
  image:
    repository: node
    tag: "18-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: NodePort
    port: 80
    nodePort: 31781
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  env:
    apiUrl: "http://localhost:31780"
    environment: "development" 