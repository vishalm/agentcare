# Logstash Configuration for AgentCare Development
# Processes application logs from various sources

input {
  # File input for application logs
  file {
    path => "/var/log/agentcare/*.log"
    start_position => "beginning"
    type => "agentcare-app"
    codec => json
    tags => ["agentcare", "application"]
  }

  # Beats input for log forwarding
  beats {
    port => 5044
    type => "beats"
  }

  # TCP input for structured logs
  tcp {
    port => 5000
    type => "tcp"
    codec => json_lines
  }

  # UDP input for syslog
  udp {
    port => 5000
    type => "syslog"
  }

  # HTTP input for webhook logs
  http {
    port => 8080
    type => "http"
  }
}

filter {
  # Process AgentCare application logs
  if [type] == "agentcare-app" {
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }

    # Add environment info
    mutate {
      add_field => { "environment" => "development" }
      add_field => { "service" => "agentcare" }
    }

    # Parse log level
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }

    # Extract user information if available
    if [userId] {
      mutate {
        add_field => { "user_id" => "%{userId}" }
      }
    }

    # Extract request information
    if [requestId] {
      mutate {
        add_field => { "request_id" => "%{requestId}" }
        add_field => { "trace_id" => "%{requestId}" }
      }
    }

    # Parse HTTP request logs
    if [type] == "http_request" {
      grok {
        match => { 
          "message" => "%{COMBINEDAPACHELOG}"
        }
      }
      
      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      }
    }

    # Parse error logs
    if [level] == "ERROR" or [level] == "error" {
      mutate {
        add_tag => [ "error", "alert" ]
      }
      
      # Extract stack trace
      if [stack] {
        mutate {
          add_field => { "stack_trace" => "%{stack}" }
        }
      }
    }

    # Parse performance metrics
    if [responseTime] {
      mutate {
        convert => { "responseTime" => "integer" }
        add_tag => [ "performance" ]
      }
    }

    # Parse database queries
    if [query] {
      mutate {
        add_tag => [ "database" ]
      }
      
      if [queryTime] {
        mutate {
          convert => { "queryTime" => "float" }
        }
      }
    }

    # Parse AI/LLM logs
    if [agent] or [llm] {
      mutate {
        add_tag => [ "ai", "llm" ]
      }
      
      if [tokens] {
        mutate {
          convert => { "tokens" => "integer" }
        }
      }
    }
  }

  # Process system logs
  if [type] == "syslog" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_server} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
      }
    }
    
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }

  # Process Docker container logs
  if [container] {
    mutate {
      add_tag => [ "docker", "container" ]
    }
  }

  # Geolocation for IP addresses
  if [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }

  # User agent parsing
  if [agent] {
    useragent {
      source => "agent"
      target => "user_agent"
    }
  }

  # Remove sensitive information
  mutate {
    remove_field => [ "password", "token", "secret", "key" ]
  }

  # Add processing timestamp
  mutate {
    add_field => { "processed_at" => "%{@timestamp}" }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "agentcare-logs-%{+YYYY.MM.dd}"
    template_name => "agentcare"
    template_pattern => "agentcare-*"
    template => "/usr/share/logstash/templates/agentcare-template.json"
    template_overwrite => true
  }

  # Output to stdout for debugging
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }

  # Conditional outputs based on log level
  if "error" in [tags] {
    # Send errors to separate index
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "agentcare-errors-%{+YYYY.MM.dd}"
    }
  }

  if "performance" in [tags] {
    # Send performance metrics to separate index
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "agentcare-performance-%{+YYYY.MM.dd}"
    }
  }

  if "ai" in [tags] {
    # Send AI/LLM logs to separate index
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "agentcare-ai-%{+YYYY.MM.dd}"
    }
  }

  # File output for backup
  file {
    path => "/var/log/logstash/agentcare-%{+YYYY-MM-dd}.log"
    codec => json_lines
  }
} 