version: '3.8'

services:
  # Ollama LLM Service - Production Configuration
  ollama:
    image: ollama/ollama:latest
    container_name: agentcare-ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_MAX_MEMORY=8G
    restart: unless-stopped
    networks:
      - agentcare-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
    command: >
      sh -c "ollama serve &
             sleep 15 &&
             ollama pull qwen2.5:latest &&
             ollama pull deepseek-r1:1.5b &&
             wait"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s

  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:14
    container_name: agentcare-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentcare}
      POSTGRES_USER: ${POSTGRES_USER:-agentcare_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/enhanced-multi-tenant-schema.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
      - ./backups:/backups
    networks:
      - agentcare-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-agentcare_user} -d ${POSTGRES_DB:-agentcare}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: agentcare-redis-prod
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - agentcare-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AgentCare Backend API - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agentcare-backend-prod
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-agentcare_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-agentcare}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-qwen2.5:latest}
      - ENABLE_OLLAMA_LLM=true
      - ENABLE_RAG_SYSTEM=true
      - ENABLE_USER_REGISTRATION=${ENABLE_USER_REGISTRATION:-false}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_SWAGGER_UI=${ENABLE_SWAGGER_UI:-false}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HIPAA_LOGGING=true
      - AUDIT_LOG_RETENTION_DAYS=2555
      - ENABLE_RATE_LIMITING=true
      - API_RATE_LIMIT=${API_RATE_LIMIT:-50}
      - API_RATE_WINDOW=${API_RATE_WINDOW:-900000}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - SSL_CERT_PATH=${SSL_CERT_PATH}
      - SSL_KEY_PATH=${SSL_KEY_PATH}
    volumes:
      - logs_data:/app/logs
      - ./ssl:/app/ssl:ro
    networks:
      - agentcare-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # AgentCare Frontend - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: agentcare-frontend-prod
    environment:
      - NODE_ENV=production
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - agentcare-network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: agentcare-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - ./logs/nginx:/var/log/nginx
    networks:
      - agentcare-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: agentcare-loki-prod
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
    networks:
      - agentcare-network
    restart: unless-stopped
    profiles:
      - logging

  # Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agentcare-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - agentcare-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:14
    container_name: agentcare-backup-prod
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh
    networks:
      - agentcare-network
    depends_on:
      - postgres
    restart: "no"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-agentcare_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-agentcare}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: >
      sh -c "
        while true; do
          sleep 86400  # 24 hours
          /usr/local/bin/backup.sh
        done
      "
    profiles:
      - backup

networks:
  agentcare-network:
    driver: bridge
    name: agentcare-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    name: agentcare-postgres-prod-data
    driver: local
  redis_data:
    name: agentcare-redis-prod-data
    driver: local
  ollama_data:
    name: agentcare-ollama-prod-data
    driver: local
  prometheus_data:
    name: agentcare-prometheus-prod-data
    driver: local
  loki_data:
    name: agentcare-loki-prod-data
    driver: local
  logs_data:
    name: agentcare-logs-prod-data
    driver: local
  nginx_cache:
    name: agentcare-nginx-cache-prod
    driver: local 