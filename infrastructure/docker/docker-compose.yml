version: '3.8'

services:
  # Ollama LLM Service - Core AI Engine
  ollama:
    image: ollama/ollama:latest
    container_name: agentcare-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-2}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-1}
    restart: unless-stopped
    networks:
      - agentcare-network
    command: >
      sh -c "ollama serve &
             sleep 10 &&
             ollama pull qwen2.5:latest &&
             ollama pull deepseek-r1:1.5b &&
             wait"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: agentcare-postgres
    environment:
      POSTGRES_DB: agentcare_dev
      POSTGRES_USER: agentcare
      POSTGRES_PASSWORD: agentcare_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../database/enhanced-multi-tenant-schema.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ../../database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - agentcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentcare -d agentcare_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentcare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentcare-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass agentcare_redis_dev
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AgentCare Backend API
  backend:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.backend
      target: development
    container_name: agentcare-backend
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://agentcare:agentcare_dev@postgres:5432/agentcare_dev
      - REDIS_URL=redis://:agentcare_redis_dev@redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen2.5:latest
      - ENABLE_OLLAMA_LLM=true
      - ENABLE_RAG_SYSTEM=true
      - ENABLE_USER_REGISTRATION=true
      - JWT_SECRET=development-secret-key-change-in-production
      - SESSION_SECRET=development-session-secret
      - LOG_LEVEL=debug
      - ENABLE_SWAGGER_UI=true
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HIPAA_LOGGING=true
      - AUDIT_LOG_RETENTION_DAYS=2555
      - ENABLE_RATE_LIMITING=true
      - API_RATE_LIMIT=100
      - API_RATE_WINDOW=900000
    volumes:
      - ../../backend:/app/backend
      - ../../package.json:/app/package.json
      - ../../tsconfig.json:/app/tsconfig.json
      - backend_node_modules:/app/backend/node_modules
      - logs_data:/app/logs
    networks:
      - agentcare-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    working_dir: /app/backend
    command: npm run dev

  # AgentCare Frontend
  frontend:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.frontend
      target: development
    container_name: agentcare-frontend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000
      - VITE_ENABLE_MOCK_API=false
      - VITE_APP_TITLE=AgentCare - AI Healthcare Scheduling
      - VITE_APP_VERSION=2.0.0
    volumes:
      - ../../frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules
    networks:
      - agentcare-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: agentcare-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agentcare.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - agentcare-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: agentcare-redis-commander
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:agentcare_redis_dev
    ports:
      - "8081:8081"
    networks:
      - agentcare-network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agentcare-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agentcare-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agentcare-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agentcare-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: agentcare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - agentcare-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - proxy

networks:
  agentcare-network:
    driver: bridge
    name: agentcare-network

volumes:
  postgres_data:
    name: agentcare-postgres-data
  redis_data:
    name: agentcare-redis-data
  ollama_data:
    name: agentcare-ollama-data
  pgadmin_data:
    name: agentcare-pgadmin-data
  prometheus_data:
    name: agentcare-prometheus-data
  grafana_data:
    name: agentcare-grafana-data
  logs_data:
    name: agentcare-logs-data
  backend_node_modules:
    name: agentcare-backend-node-modules
  frontend_node_modules:
    name: agentcare-frontend-node-modules 