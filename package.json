{
    "name": "agentcare",
    "version": "3.0.0-beta",
    "description": "Enterprise-grade multi-agent healthcare scheduling platform with AI coordination and HIPAA compliance",
    "private": true,
    "type": "module",
    "workspaces": [
        "frontend",
        "backend"
    ],
    "main": "backend/dist/index.js",
    "scripts": {
        "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
        "dev:backend": "cd backend && npm run dev",
        "dev:frontend": "cd frontend && npm run dev",
        "dev:quick": "npm run kill-port && npm run start:dev",
        "install:all": "npm install && npm run install:workspaces",
        "install:workspaces": "npm install --workspaces",
        "install:backend": "cd backend && npm install",
        "install:frontend": "cd frontend && npm install",
        "build": "npm run build:backend && npm run build:frontend",
        "build:backend": "cd backend && npm run build",
        "build:frontend": "cd frontend && npm run build",
        "build:quiet": "cd backend && npm run build >/dev/null 2>&1",
        "build:watch": "cd backend && npm run build:watch",
        "start": "cd backend && npm start",
        "start:dev": "cd backend && npm run start:dev",
        "start:backend": "cd backend && npm start",
        "start:frontend": "cd frontend && npm run preview",
        "kill-port": "lsof -ti:3000 | xargs kill -9 2>/dev/null || echo 'No process on port 3000'",
        "clean": "npm run clean:backend && npm run clean:frontend && rimraf logs tmp coverage .nyc_output",
        "clean:backend": "cd backend && npm run clean",
        "clean:frontend": "cd frontend && rm -rf dist",
        "clean:all": "npm run clean && rm -rf node_modules frontend/node_modules backend/node_modules",
        "prepare": "npm run build",
        "test": "npm run test:unit && npm run test:integration && npm run test:contract",
        "test:all": "npm run test:unit && npm run test:integration && npm run test:contract && npm run test:ui",
        "test:unit": "jest --config=jest.config.js --testPathPattern=tests/unit",
        "test:integration": "jest --config=jest.config.js --testPathPattern=tests/integration",
        "test:contract": "jest --config=jest.config.js --testPathPattern=tests/contract",
        "test:ui": "playwright test",
        "test:e2e": "playwright test",
        "test:backend": "cd backend && npm test",
        "test:frontend": "cd frontend && npm test",
        "test:watch": "jest --watch --config=jest.config.js",
        "test:coverage": "jest --config=jest.config.js --coverage",
        "test:ci": "jest --config=jest.config.js --ci --coverage --watchAll=false",
        "type-check": "npm run type-check:backend && npm run type-check:frontend",
        "type-check:backend": "cd backend && npm run type-check",
        "type-check:frontend": "cd frontend && npm run type-check",
        "lint": "npm run lint:backend && npm run lint:frontend",
        "lint:backend": "cd backend && npm run lint",
        "lint:frontend": "cd frontend && npm run lint",
        "lint:fix": "npm run lint:fix:backend && npm run lint:fix:frontend",
        "lint:fix:backend": "cd backend && npm run lint:fix",
        "lint:fix:frontend": "cd frontend && npm run lint",
        "format": "npm run format:backend && npm run format:frontend",
        "format:backend": "cd backend && npm run format",
        "format:frontend": "prettier --write \"frontend/src/**/*.{ts,tsx,js,jsx,json}\"",
        "format:check": "npm run format:check:backend && npm run format:check:frontend",
        "format:check:backend": "cd backend && npm run format:check",
        "format:check:frontend": "prettier --check \"frontend/src/**/*.{ts,tsx,js,jsx,json}\"",
        "db:setup": "./scripts/db-setup.sh",
        "db:setup:force": "./scripts/db-setup.sh --force-recreate",
        "db:setup:no-demo": "./scripts/db-setup.sh --no-demo-data",
        "db:migrate": "./scripts/db-setup.sh --no-demo-data",
        "db:seed": "./scripts/db-setup.sh",
        "db:seed:demo": "./scripts/db-setup.sh",
        "db:seed:force": "./scripts/db-setup.sh --force-recreate",
        "db:reset": "./scripts/db-setup.sh --force-recreate",
        "db:reset:demo": "./scripts/db-setup.sh --force-recreate",
        "db:status": "psql -h ${DB_HOST:-localhost} -p ${DB_PORT:-5432} -U ${DB_USER:-agentcare_user} -d ${DB_NAME:-agentcare} -c \"SELECT 'users' as table_name, COUNT(*) as count FROM users UNION ALL SELECT 'providers', COUNT(*) FROM providers UNION ALL SELECT 'appointments', COUNT(*) FROM appointments;\" 2>/dev/null || echo 'Database not accessible. Run: npm run db:setup'",
        "gitignore:check": "git check-ignore -v node_modules/ dist/ .env || echo 'Gitignore working correctly'",
        "gitignore:clean": "git rm -r --cached . && git add .",
        "docker:ignore-test": "docker build -f infrastructure/docker/Dockerfile -t agentcare:test . --no-cache",
        "ollama:install": "echo 'Please install Ollama manually: https://ollama.ai/download'",
        "ollama:pull": "ollama pull qwen2.5:latest",
        "ollama:start": "ollama serve",
        "ollama:status": "curl -s http://localhost:11434/api/tags || echo 'Ollama not running'",
        "setup": "npm install && npm run ollama:pull && cp env.example .env && npm run db:setup",
        "setup:complete": "npm run setup && npm run build && npm run test:unit",
        "setup:demo": "npm run setup && npm run db:seed:demo && npm run start:dev",
        "setup:production": "npm install --only=production && npm run build && npm run db:setup:no-demo",
        "setup:fresh": "npm run clean:all && npm install && npm run db:reset:demo && npm run build",
        "health": "curl -s http://localhost:3000/health | jq .",
        "health:backend": "curl -s http://localhost:3000/health | jq .",
        "health:frontend": "curl -s http://localhost:3001 || echo 'Frontend not accessible'",
        "status": "curl -s http://localhost:3000/api/v1/agents/status | jq .",
        "metrics": "curl -s http://localhost:3000/api/v1/metrics | jq .",
        "docker:build": "docker build -f infrastructure/docker/Dockerfile -t agentcare:latest .",
        "docker:build:backend": "docker build -f infrastructure/docker/Dockerfile.backend -t agentcare-backend:latest .",
        "docker:build:frontend": "docker build -f infrastructure/docker/Dockerfile.frontend -t agentcare-frontend:latest .",
        "docker:run": "docker run -p 3000:3000 --env-file .env agentcare:latest",
        "docker:run:backend": "docker run -p 3000:3000 --env-file .env agentcare-backend:latest",
        "docker:run:frontend": "docker run -p 3001:80 agentcare-frontend:latest",
        "docker:compose": "cd infrastructure/docker && docker-compose up --build",
        "docker:compose:root": "docker-compose -f infrastructure/docker/docker-compose.yml up --build",
        "docker:dev": "cd infrastructure/docker && docker-compose --profile development up --build",
        "docker:prod": "cd infrastructure/docker && docker-compose --profile production up --build",
        "docker:clean": "cd infrastructure/docker && docker-compose down --volumes && docker system prune -f",
        "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/",
        "k8s:delete": "kubectl delete -f infrastructure/kubernetes/",
        "k8s:status": "kubectl get pods -n agentcare",
        "k8s:logs": "kubectl logs -f deployment/agentcare -n agentcare",
        "k8s:describe": "kubectl describe deployment agentcare -n agentcare",
        "helm:install": "helm install agentcare infrastructure/helm/agentcare --namespace agentcare --create-namespace",
        "helm:upgrade": "helm upgrade agentcare infrastructure/helm/agentcare",
        "helm:uninstall": "helm uninstall agentcare -n agentcare",
        "helm:status": "helm status agentcare -n agentcare",
        "helm:values": "helm get values agentcare -n agentcare",
        "helm:staging": "helm upgrade --install agentcare-staging infrastructure/helm/agentcare --namespace agentcare-staging --create-namespace --values infrastructure/helm/agentcare/values-staging.yaml",
        "helm:production": "helm upgrade --install agentcare infrastructure/helm/agentcare --namespace agentcare --create-namespace --values infrastructure/helm/agentcare/values-production.yaml",
        "monitoring:deploy": "kubectl apply -f infrastructure/observability/",
        "monitoring:grafana": "kubectl port-forward svc/grafana 3000:3000 -n monitoring",
        "monitoring:prometheus": "kubectl port-forward svc/prometheus 9090:9090 -n monitoring",
        "monitoring:jaeger": "kubectl port-forward svc/jaeger-query 16686:16686 -n tracing",
        "docs:generate": "typedoc --out docs/api backend/src",
        "docs:serve": "http-server docs -p 8080",
        "deploy:staging": "npm run helm:staging",
        "deploy:production": "npm run helm:production",
        "backup:config": "cp .env .env.backup.$(date +%Y%m%d_%H%M%S)",
        "restore:config": "echo 'Please specify backup file to restore'",
        "logs": "tail -f logs/agentcare.log",
        "logs:error": "tail -f logs/error.log",
        "infra:check": "echo 'Infrastructure files:' && find infrastructure -name '*.yml' -o -name '*.yaml' | head -10",
        "infra:validate": "helm lint infrastructure/helm/agentcare && echo 'Helm chart validation passed'",
        "pm2:start": "pm2 start infrastructure/process-management/ecosystem.config.js",
        "pm2:stop": "pm2 stop infrastructure/process-management/ecosystem.config.js",
        "pm2:restart": "pm2 restart infrastructure/process-management/ecosystem.config.js",
        "pm2:reload": "pm2 reload infrastructure/process-management/ecosystem.config.js",
        "pm2:delete": "pm2 delete infrastructure/process-management/ecosystem.config.js",
        "pm2:logs": "pm2 logs",
        "pm2:status": "pm2 status",
        "pm2:monit": "pm2 monit",
        "pm2:save": "pm2 save",
        "pm2:startup": "pm2 startup",
        "pm2:resurrect": "pm2 resurrect",
        "pm2:deploy:staging": "pm2 deploy infrastructure/process-management/ecosystem.config.js staging",
        "pm2:deploy:production": "pm2 deploy infrastructure/process-management/ecosystem.config.js production",
        "pm2:cluster": "pm2 start infrastructure/process-management/ecosystem.config.js --env production",
        "pm2:dev": "pm2 start infrastructure/process-management/ecosystem.config.js --env development --watch",
        "patterns:circuit-breaker": "npm run test -- --testNamePattern='CircuitBreaker'",
        "patterns:event-driven": "npm run test -- --testNamePattern='EventDriven'",
        "patterns:service-mesh": "npm run test -- --testNamePattern='ServiceMesh'",
        "patterns:caching": "npm run test -- --testNamePattern='Caching'",
        "arch:analyze": "echo 'Analyzing architectural patterns...' && npm run patterns:circuit-breaker && npm run patterns:event-driven",
        "arch:health": "curl -s http://localhost:3000/api/v1/architecture/health | jq .",
        "arch:metrics": "curl -s http://localhost:3000/api/v1/architecture/metrics | jq .",
        "arch:patterns": "curl -s http://localhost:3000/api/v1/architecture/patterns | jq .",
        "perf:load-test": "echo 'Running load tests...' && npm run test:integration",
        "perf:stress-test": "echo 'Running stress tests...'",
        "perf:benchmark": "echo 'Running performance benchmarks...'",
        "perf:profile": "echo 'Profiling application performance...'",
        "security:scan": "echo 'Running security scan...' && npm audit",
        "security:deps": "npm audit --audit-level moderate",
        "security:secrets": "echo 'Checking for secrets...'",
        "security:sast": "echo 'Running static analysis...'",
        "sonar:scan": "sonar-scanner",
        "sonar:analyze": "npm run test:coverage && npm run sonar:scan",
        "sonar:preview": "sonar-scanner -Dsonar.analysis.mode=preview",
        "sonar:local": "sonar-scanner -Dsonar.host.url=http://localhost:9000",
        "cache:warm": "curl -X POST http://localhost:3000/api/v1/cache/warm",
        "cache:clear": "curl -X DELETE http://localhost:3000/api/v1/cache/clear",
        "cache:stats": "curl -s http://localhost:3000/api/v1/cache/stats | jq .",
        "cache:analytics": "curl -s http://localhost:3000/api/v1/cache/analytics | jq .",
        "circuit-breaker:status": "curl -s http://localhost:3000/api/v1/circuit-breaker/status | jq .",
        "circuit-breaker:reset": "curl -X POST http://localhost:3000/api/v1/circuit-breaker/reset",
        "service-mesh:registry": "curl -s http://localhost:3000/api/v1/service-mesh/registry | jq .",
        "service-mesh:health": "curl -s http://localhost:3000/api/v1/service-mesh/health | jq .",
        "event-bus:stats": "curl -s http://localhost:3000/api/v1/event-bus/stats | jq .",
        "scaling:horizontal": "kubectl scale deployment agentcare --replicas=5 -n agentcare",
        "scaling:vertical": "echo 'Vertical scaling requires resource limit updates'",
        "scaling:auto": "kubectl autoscale deployment agentcare --cpu-percent=70 --min=2 --max=10 -n agentcare",
        "enterprise:backup": "npm run backup:config && npm run backup:data",
        "enterprise:restore": "npm run restore:config && npm run restore:data",
        "enterprise:migrate": "echo 'Running enterprise migration...'",
        "enterprise:upgrade": "echo 'Upgrading enterprise components...'",
        "backup:data": "echo 'Backing up application data...'",
        "restore:data": "echo 'Restoring application data...'",
        "maintenance:start": "curl -X POST http://localhost:3000/api/v1/maintenance/start",
        "maintenance:end": "curl -X POST http://localhost:3000/api/v1/maintenance/end",
        "maintenance:status": "curl -s http://localhost:3000/api/v1/maintenance/status | jq .",
        "chaos:network": "echo 'Simulating network chaos...'",
        "chaos:cpu": "echo 'Simulating CPU stress...'",
        "chaos:memory": "echo 'Simulating memory pressure...'",
        "resilience:test": "npm run chaos:network && npm run chaos:cpu",
        "observability:setup": "npm run monitoring:deploy",
        "observability:dashboard": "npm run monitoring:grafana",
        "observability:traces": "npm run monitoring:jaeger",
        "compliance:hipaa": "echo 'Running HIPAA compliance checks...'",
        "compliance:audit": "echo 'Running compliance audit...'",
        "compliance:report": "echo 'Generating compliance report...'",
        "12factor:setup": "cp infrastructure/12factor/env.12factor.template .env && echo '12-Factor environment template copied'",
        "12factor:validate": "npm run validate:12factor",
        "12factor:dev": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml up",
        "12factor:build": "docker build -f infrastructure/12factor/Dockerfile.12factor -t agentcare:12factor .",
        "12factor:deploy": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml up -d",
        "12factor:health": "curl -s http://localhost:3000/health && npm run health:services",
        "codebase:info": "echo \"Codebase Info:\" && git log --oneline -1 && echo \"Branch: $(git branch --show-current)\" && echo \"Version: ${APP_VERSION:-development}\"",
        "codebase:status": "git status --porcelain",
        "deps:install": "npm ci --only=production --no-audit --no-fund",
        "deps:audit": "npm audit && echo 'Dependencies are isolated in containers'",
        "deps:update": "npm update && npm audit fix",
        "config:validate": "node -e \"require('./backend/src/config/TwelveFactorConfig').validateEnvironment()\"",
        "config:show": "node -e \"console.log(JSON.stringify(require('./backend/src/config/TwelveFactorConfig').config12Factor.getConfig(), null, 2))\"",
        "config:test": "echo 'Testing configuration with different environments' && NODE_ENV=test npm run config:validate",
        "services:start": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml up postgres redis ollama -d",
        "services:stop": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml stop postgres redis ollama",
        "services:health": "curl -s http://localhost:3000/api/v1/services/health | jq .",
        "services:status": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml ps postgres redis ollama",
        "build:stage": "npm run build",
        "release:create": "docker build -f infrastructure/12factor/Dockerfile.12factor -t agentcare:$(date +%Y%m%d-%H%M%S) .",
        "release:tag": "git tag -a v$(npm run version --silent) -m 'Release version $(npm run version --silent)'",
        "release:list": "docker images agentcare",
        "run:release": "echo 'Usage: docker run agentcare:TAG' && docker images agentcare --format 'table {{.Repository}}:{{.Tag}}\\t{{.CreatedAt}}'",
        "processes:start": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').processManager.startProcess('web')\"",
        "processes:stop": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').processManager.shutdown()\"",
        "processes:scale": "node -e \"const [type, count] = process.argv.slice(2); require('./backend/src/process/TwelveFactorProcessManager').processManager.scaleProcess(type, parseInt(count))\"",
        "processes:status": "node -e \"console.log(JSON.stringify(require('./backend/src/process/TwelveFactorProcessManager').processManager.getProcessStatus(), null, 2))\"",
        "port:test": "curl -s http://localhost:${PORT:-3000}/health || echo 'Service not responding on port ${PORT:-3000}'",
        "port:bind": "echo 'Starting on port ${PORT:-3000}' && npm start",
        "port:multiple": "echo 'Starting multiple instances' && PORT=3001 npm start & PORT=3002 npm start &",
        "scale:web": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').processManager.scaleProcess('web', parseInt(process.argv[2]))\"",
        "scale:worker": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').processManager.scaleProcess('worker', parseInt(process.argv[2]))\"",
        "scale:auto": "echo 'Auto-scaling enabled based on CPU/memory metrics'",
        "scale:status": "npm run processes:status",
        "startup:benchmark": "time npm start",
        "startup:test": "timeout 10s npm start && echo 'Fast startup verified'",
        "shutdown:test": "npm start & PID=$! && sleep 5 && kill -TERM $PID && wait $PID",
        "shutdown:graceful": "kill -TERM $(pgrep -f 'node.*backend/dist/index.js') && echo 'Graceful shutdown initiated'",
        "parity:dev": "NODE_ENV=development npm run config:show",
        "parity:staging": "NODE_ENV=staging npm run config:show",
        "parity:production": "NODE_ENV=production npm run config:show",
        "parity:compare": "npm run parity:dev && npm run parity:staging && npm run parity:production",
        "logs:stream": "npm start | jq -r '. | \"\\(.timestamp) \\(.level | ascii_upcase) [\\(.service)] \\(.message)\"'",
        "logs:json": "npm start | jq .",
        "logs:errors": "npm start | jq 'select(.level == \"error\")'",
        "logs:audit": "npm start | jq 'select(.auditEvent == true)'",
        "logs:healthcare": "npm start | jq 'select(.hipaaCompliant == true)'",
        "admin:migrate": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').adminRunner.runAdminCommand('migrate').then(r => console.log(r))\"",
        "admin:seed": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').adminRunner.runAdminCommand('seed').then(r => console.log(r))\"",
        "admin:backup": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').adminRunner.runAdminCommand('backup').then(r => console.log(r))\"",
        "admin:restore": "node -e \"require('./backend/src/process/TwelveFactorProcessManager').adminRunner.runAdminCommand('restore').then(r => console.log(r))\"",
        "admin:status": "echo 'Admin commands: migrate, seed, backup, restore'",
        "validate:codebase": "git status --porcelain | wc -l | xargs test 0 -eq && echo '✓ Factor 1: Single codebase in Git'",
        "validate:dependencies": "npm ls --depth=0 > /dev/null && echo '✓ Factor 2: Dependencies explicitly declared'",
        "validate:config": "npm run config:validate && echo '✓ Factor 3: Config in environment'",
        "validate:services": "npm run services:health && echo '✓ Factor 4: Backing services attached'",
        "validate:build": "npm run build && echo '✓ Factor 5: Build/release/run separated'",
        "validate:processes": "npm run processes:status && echo '✓ Factor 6: Stateless processes'",
        "validate:port-binding": "npm run port:test && echo '✓ Factor 7: Port binding working'",
        "validate:concurrency": "npm run scale:status && echo '✓ Factor 8: Concurrency via processes'",
        "validate:disposability": "npm run shutdown:test && echo '✓ Factor 9: Graceful shutdown'",
        "validate:dev-prod-parity": "npm run parity:compare && echo '✓ Factor 10: Dev/prod parity'",
        "validate:logs": "npm run logs:json | head -1 | jq . && echo '✓ Factor 11: Structured logs'",
        "validate:admin": "npm run admin:status && echo '✓ Factor 12: Admin processes'",
        "validate:12factor": "npm run validate:codebase && npm run validate:dependencies && npm run validate:config && npm run validate:services && npm run validate:build && npm run validate:processes && npm run validate:port-binding && npm run validate:concurrency && npm run validate:disposability && npm run validate:dev-prod-parity && npm run validate:logs && npm run validate:admin && echo '🎉 All 12 factors validated!'",
        "docker:build:12factor": "docker build -f infrastructure/12factor/Dockerfile.12factor -t agentcare:12factor .",
        "docker:run:12factor": "docker run -p 3000:3000 --env-file .env agentcare:12factor",
        "docker:compose:12factor": "docker-compose -f infrastructure/12factor/docker-compose.12factor.yml up",
        "dev:production-mode": "NODE_ENV=production npm run docker:compose:12factor",
        "deploy:12factor": "npm run docker:compose:12factor",
        "health:12factor": "curl -s http://localhost:3000/health && curl -s http://localhost:3000/api/v1/12factor/status",
        "health:services": "curl -s http://localhost:3000/api/v1/services/health",
        "verify:12factor": "npm run validate:12factor && npm run health:12factor && echo '✅ 12-Factor compliance verified!'"
    },
    "keywords": [
        "healthcare",
        "ai",
        "agents",
        "scheduling",
        "llm",
        "ollama",
        "rag",
        "nodejs",
        "typescript",
        "react",
        "monorepo",
        "multi-agent",
        "hipaa"
    ],
    "author": "Vishal Mishra",
    "license": "MIT",
    "repository": {
        "type": "git",
        "url": "https://github.com/vishalm/agentcare.git"
    },
    "bugs": {
        "url": "https://github.com/vishalm/agentcare/issues"
    },
    "homepage": "https://github.com/vishalm/agentcare#readme",
    "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
    },
    "devDependencies": {
        "@playwright/test": "^1.40.0",
        "0x": "^4.1.4",
        "autocannon": "^7.12.0",
        "clinic": "^13.0.0",
        "concurrently": "^8.2.2",
        "http-server": "^14.1.1",
        "jest": "^29.7.0",
        "jest-junit": "^16.0.0",
        "jest-sonar-reporter": "^2.0.0",
        "nodemon": "^3.1.10",
        "prettier": "^3.1.0",
        "rimraf": "^5.0.10",
        "sonarqube-scanner": "^4.3.0",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.1",
        "tsx": "^4.19.4",
        "typedoc": "^0.25.13",
        "typescript": "^5.3.2"
    },
    "dependencies": {
        "pm2": "^5.3.0"
    },
    "peerDependencies": {
        "ollama": ">=0.1.0"
    },
    "optionalDependencies": {
        "sharp": "^0.32.6"
    },
    "contributors": [
        {
            "name": "Vishal Mishra",
            "email": "vishal@agentcare.dev",
            "url": "https://github.com/vishalm"
        }
    ],
    "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/vishalm"
    }
}
