{
    "name": "agentcare",
    "version": "2.0.0-alpha",
    "description": "Enhanced Multi-Agent Healthcare Scheduling System with Ollama LLM + RAG",
    "main": "backend/dist/index.js",
    "scripts": {
        "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
        "dev:backend": "nodemon --exec tsx backend/src/index.ts",
        "dev:frontend": "http-server frontend/public -p 3001 -o --cors",
        "dev:setup": "./scripts/dev-setup.sh",
        "dev:docker": "./scripts/docker-dev.sh",
        "dev:quick": "npm run kill-port && npm run start:dev",
        "build": "npm run build:backend && npm run build:frontend",
        "build:backend": "tsc -p backend/tsconfig.json",
        "build:frontend": "echo 'Frontend build completed'",
        "start": "node backend/dist/index.js",
        "start:dev": "tsx backend/src/index.ts",
        "kill-port": "lsof -ti:3000 | xargs kill -9 2>/dev/null || echo 'No process on port 3000'",
        "clean": "rimraf backend/dist coverage .nyc_output",
        "clean:all": "npm run clean && rm -rf node_modules logs tmp",
        "prepare": "npm run build",
        "test": "npm run test:unit && npm run test:integration && npm run test:contract",
        "test:all": "npm run test:unit && npm run test:integration && npm run test:contract && npm run test:ui",
        "test:unit": "jest --config=jest.config.js --testPathPattern=tests/unit",
        "test:integration": "jest --config=jest.config.js --testPathPattern=tests/integration",
        "test:contract": "jest --config=jest.config.js --testPathPattern=tests/contract",
        "test:ui": "playwright test",
        "test:watch": "jest --watch --config=jest.config.js",
        "test:coverage": "jest --config=jest.config.js --coverage",
        "test:ci": "jest --config=jest.config.js --ci --coverage --watchAll=false",
        "lint": "eslint backend/src --ext .ts,.js",
        "lint:fix": "eslint backend/src --ext .ts,.js --fix",
        "format": "prettier --write \"backend/src/**/*.{ts,js,json}\" \"frontend/**/*.{html,css,js}\"",
        "format:check": "prettier --check \"backend/src/**/*.{ts,js,json}\" \"frontend/**/*.{html,css,js}\"",
        "gitignore:check": "git check-ignore -v node_modules/ dist/ .env || echo 'Gitignore working correctly'",
        "gitignore:clean": "git rm -r --cached . && git add .",
        "docker:ignore-test": "docker build -f infrastructure/docker/Dockerfile -t agentcare:test . --no-cache",
        "ollama:install": "echo 'Please install Ollama manually: https://ollama.ai/download'",
        "ollama:pull": "ollama pull qwen2.5:latest",
        "ollama:start": "ollama serve",
        "ollama:status": "curl -s http://localhost:11434/api/tags || echo 'Ollama not running'",
        "setup": "npm install && npm run ollama:pull && cp env.example .env",
        "setup:complete": "npm run setup && npm run build && npm run test:unit",
        "setup:demo": "npm run setup && npm run start:dev",
        "health": "curl -s http://localhost:3000/health | jq .",
        "status": "curl -s http://localhost:3000/api/v1/agents/status | jq .",
        "metrics": "curl -s http://localhost:3000/api/v1/metrics | jq .",
        "docker:build": "docker build -f infrastructure/docker/Dockerfile -t agentcare:latest .",
        "docker:run": "docker run -p 3000:3000 --env-file .env agentcare:latest",
        "docker:compose": "docker-compose -f infrastructure/docker/docker-compose.yml up --build",
        "docker:dev": "docker-compose -f infrastructure/docker/docker-compose.yml --profile development up --build",
        "docker:prod": "docker-compose -f infrastructure/docker/docker-compose.yml --profile production up --build",
        "docker:clean": "docker-compose -f infrastructure/docker/docker-compose.yml down --volumes && docker system prune -f",
        "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/",
        "k8s:delete": "kubectl delete -f infrastructure/kubernetes/",
        "k8s:status": "kubectl get pods -n agentcare",
        "k8s:logs": "kubectl logs -f deployment/agentcare -n agentcare",
        "k8s:describe": "kubectl describe deployment agentcare -n agentcare",
        "helm:install": "helm install agentcare infrastructure/helm/agentcare --namespace agentcare --create-namespace",
        "helm:upgrade": "helm upgrade agentcare infrastructure/helm/agentcare",
        "helm:uninstall": "helm uninstall agentcare -n agentcare",
        "helm:status": "helm status agentcare -n agentcare",
        "helm:values": "helm get values agentcare -n agentcare",
        "helm:staging": "helm upgrade --install agentcare-staging infrastructure/helm/agentcare --namespace agentcare-staging --create-namespace --values infrastructure/helm/agentcare/values-staging.yaml",
        "helm:production": "helm upgrade --install agentcare infrastructure/helm/agentcare --namespace agentcare --create-namespace --values infrastructure/helm/agentcare/values-production.yaml",
        "monitoring:deploy": "kubectl apply -f infrastructure/observability/",
        "monitoring:grafana": "kubectl port-forward svc/grafana 3000:3000 -n monitoring",
        "monitoring:prometheus": "kubectl port-forward svc/prometheus 9090:9090 -n monitoring",
        "monitoring:jaeger": "kubectl port-forward svc/jaeger-query 16686:16686 -n tracing",
        "docs:generate": "typedoc --out docs/api backend/src",
        "docs:serve": "http-server docs -p 8080",
        "deploy:staging": "npm run helm:staging",
        "deploy:production": "npm run helm:production",
        "backup:config": "cp .env .env.backup.$(date +%Y%m%d_%H%M%S)",
        "restore:config": "echo 'Please specify backup file to restore'",
        "logs": "tail -f logs/agentcare.log",
        "logs:error": "tail -f logs/error.log",
        "infra:check": "echo 'Infrastructure files:' && find infrastructure -name '*.yml' -o -name '*.yaml' | head -10",
        "infra:validate": "helm lint infrastructure/helm/agentcare && echo 'Helm chart validation passed'"
    },
    "keywords": [
        "healthcare",
        "ai",
        "agents",
        "scheduling",
        "llm",
        "ollama",
        "rag",
        "nodejs",
        "typescript",
        "chatbot"
    ],
    "author": "Vishal Mishra",
    "license": "MIT",
    "repository": {
        "type": "git",
        "url": "https://github.com/vishalm/agentcare.git"
    },
    "bugs": {
        "url": "https://github.com/vishalm/agentcare/issues"
    },
    "homepage": "https://github.com/vishalm/agentcare#readme",
    "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
    },
    "dependencies": {
        "cors": "^2.8.5",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "express-rate-limit": "^7.1.5",
        "helmet": "^7.1.0",
        "jsonwebtoken": "^9.0.2",
        "winston": "^3.17.0"
    },
    "devDependencies": {
        "@playwright/test": "^1.40.0",
        "@types/cors": "^2.8.16",
        "@types/express": "^4.17.21",
        "@types/jest": "^29.5.8",
        "@types/jsonwebtoken": "^9.0.5",
        "@types/node": "^20.10.0",
        "@types/supertest": "^2.0.16",
        "@typescript-eslint/eslint-plugin": "^6.12.0",
        "@typescript-eslint/parser": "^6.12.0",
        "concurrently": "^8.2.2",
        "eslint": "^8.54.0",
        "http-server": "^14.1.1",
        "jest": "^29.7.0",
        "nodemon": "^3.1.10",
        "prettier": "^3.1.0",
        "rimraf": "^5.0.10",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.1",
        "tsx": "^4.19.4",
        "typedoc": "^0.25.13",
        "typescript": "^5.3.2"
    },
    "peerDependencies": {
        "ollama": ">=0.1.0"
    },
    "optionalDependencies": {
        "sharp": "^0.32.6"
    },
    "contributors": [
        {
            "name": "Vishal Mishra",
            "email": "vishal@agentcare.dev",
            "url": "https://github.com/vishalm"
        }
    ],
    "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/vishalm"
    }
}
