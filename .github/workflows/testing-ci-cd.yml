name: "AgentCare Testing CI/CD"

on:
  push:
    branches: [main, develop, 'feature/*', 'fix/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_sonar:
        description: 'Run SonarCloud analysis'
        required: false
        default: true
        type: boolean
      test_level:
        description: 'Test level to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - contract
          - ui

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Pre-flight checks
  pre-flight:
    name: "Pre-flight Checks"
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run }}
      test-level: ${{ github.event.inputs.test_level || 'all' }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Check for relevant changes"
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]] || [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Lint code"
        run: npm run lint

      - name: "Type check"
        run: npm run type-check

      - name: "Check build"
        run: npm run build

  # Unit Tests
  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (needs.pre-flight.outputs.test-level == 'all' || needs.pre-flight.outputs.test-level == 'unit')
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Run unit tests with coverage"
        run: npm run test:unit -- --coverage --ci --watchAll=false

      - name: "Upload unit test coverage"
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # Integration Tests
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (needs.pre-flight.outputs.test-level == 'all' || needs.pre-flight.outputs.test-level == 'integration')
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: agentcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Wait for services"
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U test; do sleep 1; done'
          echo "Waiting for Redis..."
          timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: "Setup test database"
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/agentcare_test
          REDIS_URL: redis://localhost:6379

      - name: "Run integration tests"
        run: npm run test:integration -- --ci --watchAll=false
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/agentcare_test
          REDIS_URL: redis://localhost:6379

      - name: "Upload integration test results"
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/test-results.xml
          retention-days: 7

  # Contract Tests
  contract-tests:
    name: "Contract Tests"
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (needs.pre-flight.outputs.test-level == 'all' || needs.pre-flight.outputs.test-level == 'contract')
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Run contract tests"
        run: npm run test:contract -- --ci --watchAll=false

      - name: "Upload contract test results"
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results
          path: coverage/
          retention-days: 7

  # UI Tests (Playwright)
  ui-tests:
    name: "UI Tests"
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (needs.pre-flight.outputs.test-level == 'all' || needs.pre-flight.outputs.test-level == 'ui')
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Install Playwright browsers"
        run: npx playwright install --with-deps

      - name: "Run UI tests"
        run: npm run test:ui

      - name: "Upload UI test results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Comprehensive Test Coverage
  coverage-report:
    name: "Coverage Report"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, contract-tests]
    if: always() && needs.pre-flight.outputs.should-run-tests == 'true'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: agentcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Wait for services"
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U test; do sleep 1; done'
          echo "Waiting for Redis..."
          timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: "Setup test database"
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/agentcare_test
          REDIS_URL: redis://localhost:6379

      - name: "Run all tests with coverage"
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/agentcare_test
          REDIS_URL: redis://localhost:6379

      - name: "Generate coverage summary"
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Percentage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              console.log('| Statements | ' + total.statements.pct + '% |');
              console.log('| Branches | ' + total.branches.pct + '% |');
              console.log('| Functions | ' + total.functions.pct + '% |');
              console.log('| Lines | ' + total.lines.pct + '% |');
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: "Upload comprehensive coverage"
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-coverage
          path: coverage/
          retention-days: 30

  # SonarCloud Analysis
  sonarcloud:
    name: "SonarCloud Analysis"
    runs-on: ubuntu-latest
    needs: [coverage-report]
    if: always() && (github.event.inputs.run_sonar == 'true' || github.event.inputs.run_sonar == '' || github.event_name != 'workflow_dispatch')
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Download coverage reports"
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-coverage
          path: coverage/

      - name: "SonarCloud Scan"
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=vishalm_agentcare
            -Dsonar.organization=vishalm
            -Dsonar.sources=backend/src
            -Dsonar.tests=tests
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=coverage/test-results.xml
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**,**/dist/**
            -Dsonar.cpd.exclusions=**/*.test.ts,**/*.spec.ts
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/*.d.ts

  # Security Scanning
  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Run security audit"
        run: npm audit --audit-level moderate

      - name: "Run dependency check"
        run: npm run security:deps

  # Performance Tests
  performance-tests:
    name: "Performance Tests"
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && needs.pre-flight.outputs.should-run-tests == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Run performance tests"
        run: npm run perf:benchmark

      - name: "Upload performance results"
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Final Status Check
  ci-status:
    name: "CI Status"
    runs-on: ubuntu-latest
    needs: [pre-flight, unit-tests, integration-tests, contract-tests, ui-tests, coverage-report, sonarcloud, security-scan]
    if: always()
    steps:
      - name: "Check CI Status"
        run: |
          echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-flight | ${{ needs.pre-flight.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contract Tests | ${{ needs.contract-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| UI Tests | ${{ needs.ui-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Report | ${{ needs.coverage-report.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarCloud | ${{ needs.sonarcloud.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: "Fail if critical jobs failed"
        if: needs.pre-flight.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.security-scan.result == 'failure'
        run: |
          echo "❌ Critical CI jobs failed"
          exit 1

      - name: "Success notification"
        if: needs.pre-flight.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success'
        run: |
          echo "✅ All critical CI jobs passed successfully"
